//
// Copyright (c) 2020, 2021, 2022 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include "yaml.hh"
#include "statsconfig.hh"
#include "galaxy/osmchange.hh"
#include <memory>

/// \namespace statsconfig
namespace statsconfig {

    std::map<std::string, std::shared_ptr<std::vector<StatsConfig>>> statsconfigs;

    StatsConfig::StatsConfig(std::string name) {
        this->name = name;
    }
    StatsConfig::StatsConfig (
        std::string name,
        std::map<std::string, std::set<std::string>> way,
        std::map<std::string, std::set<std::string>> node,
        std::map<std::string, std::set<std::string>> relation )
    {
        this->name = name;
        this->way = way;
        this->node = node;
        this->relation = relation;
    };

    std::shared_ptr<std::vector<statsconfig::StatsConfig>> StatsConfigFile::read_yaml(std::string filename) {
        if (!statsconfig::statsconfigs.count(filename)) {
            auto statsconfig = std::make_shared<std::vector<statsconfig::StatsConfig>>();
            yaml::Yaml yaml;
            yaml.read(filename);
            for (auto it = std::begin(yaml.root.children); it != std::end(yaml.root.children); ++it) {
                std::map<std::string, std::set<std::string>> way_tags;
                std::map<std::string, std::set<std::string>> node_tags;
                std::map<std::string, std::set<std::string>> relation_tags;
                for (auto type_it = std::begin(it->children); type_it != std::end(it->children); ++type_it) {
                    for (auto value_it = std::begin(type_it->children); value_it != std::end(type_it->children); ++value_it) {
                        if (value_it->value != "*") {
                            for (auto tag_it = std::begin(value_it->children); tag_it != std::end(value_it->children); ++tag_it) {
                                if (type_it->value == "way") {
                                    way_tags[value_it->value].insert(tag_it->value);
                                } else if (type_it->value == "node") {
                                    node_tags[value_it->value].insert(tag_it->value);
                                } else if (type_it->value == "relation") {
                                    relation_tags[value_it->value].insert(tag_it->value);
                                }
                            }
                        } else {
                            if (type_it->value == "way") {
                                way_tags["*"].insert("*");
                            } else if (type_it->value == "node") {
                                node_tags["*"].insert("*");
                            } else if (type_it->value == "relation") {
                                relation_tags["*"].insert("*");
                            }
                        }
                    }
                }
                statsconfig->push_back(
                    StatsConfig(it->value, way_tags, node_tags, relation_tags)
                );
            }
            statsconfig::statsconfigs.insert(
                std::pair<std::string, std::shared_ptr<std::vector<statsconfig::StatsConfig>>>(
                    filename, statsconfig
                )
            );
        }
        return statsconfig::statsconfigs.at(filename);
    }

    bool StatsConfigSearch::category(std::string tag, std::string value, std::map<std::string, std::set<std::string>> tags) {
        for (auto tag_it = std::begin(tags); tag_it != std::end(tags); ++tag_it) {
            if (tag_it->first == "*" || (
                    tag == tag_it->first && (
                        *(tag_it->second.begin()) == "*" ||
                        tag_it->second.find(value) != tag_it->second.end()
                    )
                )
            ) {
                return true;
            }
        }
        return false;
    };

    std::string StatsConfigSearch::tag_value(std::string tag, std::string value, osmchange::osmtype_t type, std::shared_ptr<std::vector<StatsConfig>> statsconfig) {
        bool category = false;
        for (auto it = std::begin(*statsconfig); it != std::end(*statsconfig); ++it) {
            if (type == osmchange::node) {
                category = StatsConfigSearch::category(tag, value, it->node);
            } else if (type == osmchange::way) {
                category = StatsConfigSearch::category(tag, value, it->way);
            } else if (type == osmchange::relation) {
                category = StatsConfigSearch::category(tag, value, it->relation);
            }
            if (category) {
                if (it->name == "[key]") {
                    return tag;
                } else if (it->name == "[key:value]") {
                    return tag + ":" + value;
                }
                return it->name;
            }
        }
        return "";
    }



} // EOF statsconfig namespace

// Local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
