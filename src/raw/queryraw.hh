//
// Copyright (c) 2023, 2024 Humanitarian OpenStreetMap Team
// Copyright (c) 2025 Emilio Mariscal
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __QUERYRAW_HH__
#define __QUERYRAW_HH__

/// \file queryraw.hh
/// \brief This build raw queries for the database
///
/// This manages the OSM Raw Data schema in a PostgreSQL DB. This
/// includes building queries for existing data in the database, 
/// as well for updating the database.

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <iostream>
#include <map>
#include "data/pq.hh"
#include "data/utils.hh"
#include "osm/osmobjects.hh"
#include "osm/osmchange.hh"

using namespace pq;
using namespace osmobjects;
using namespace osmchange;
using namespace datautils;

/// \namespace queryraw
namespace queryraw {

/// \class QueryRaw
/// \brief This handles all raw data database access
///
/// This class handles all the queries to the OSM Raw Data PostgreSQL DB.
/// This includes querying the database for existing data, as
/// well as updating the data (geometries and tags) applying a replication file.
class QueryRaw {
  public:
    ~QueryRaw(void){};
    QueryRaw(std::shared_ptr<Pq> db);

    // Name of the table for storing polygons
    static const std::string polyTable;
    // Name of the table for storing linestrings
    static const std::string lineTable;

    // Data utils
    std::shared_ptr<DataUtils> utils;

    // OSM DB connection
    std::shared_ptr<Pq> dbconn;

    /// Build queries for apply changes to OSM features into DB
    std::shared_ptr<std::vector<std::string>> applyChange(const OsmNode &node) const;
    std::shared_ptr<std::vector<std::string>> applyChange(const OsmWay &way) const;
    std::shared_ptr<std::vector<std::string>> applyChange(const OsmRelation &relation) const;

    // Get OSM features from DB
    virtual std::vector<std::shared_ptr<osmobjects::OsmRelation>> getRelationsByWaysRefs(const std::string &wayIds) const;
    virtual std::vector<std::shared_ptr<osmobjects::OsmWay>> getWaysByIds(const std::string &waysIds) const;
    virtual std::vector<std::shared_ptr<osmobjects::OsmNode>> getNodesByIds(const std::string &nodeIds) const;
    std::vector<std::shared_ptr<osmobjects::OsmNode>> getNodesFromWays(const std::shared_ptr<std::vector<OsmWay>> &ways) const;
    virtual std::vector<std::shared_ptr<osmobjects::OsmWay>> getWaysByNodesRefs(const std::string &nodeIds) const;

    // Get latest timestamp from DB
    boost::posix_time::ptime getLatestTimestamp(void);

};

} // namespace queryraw

#endif // EOF __QUERYRAW_HH__

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
