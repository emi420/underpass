//
// Copyright (c) 2020, 2021, 2022, 2023, 2024 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <array>
#include <cassert>
#include <chrono>
#include <cstdlib>
#include <deque>
#include <iostream>
#include <list>
#include <memory>
#include <pqxx/pqxx>
#include <sstream>
#include <string>
#include <thread>
#include <tuple>
#include <vector>

#include "replicator/planetreplicator.hh"
#include "boost/date_time/posix_time/posix_time.hpp"
#include <boost/date_time.hpp>
using namespace boost::posix_time;
using namespace boost::gregorian;
#include <boost/filesystem.hpp>
#include <boost/iostreams/copy.hpp>
#include <boost/iostreams/device/array.hpp>
#include <boost/iostreams/device/back_inserter.hpp>
#include <boost/iostreams/filter/gzip.hpp>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/filtering_streambuf.hpp>
#include <boost/program_options.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/regex.hpp>
#include <boost/timer/timer.hpp>

using namespace boost;
namespace opts = boost::program_options;

#include "utils/geoutil.hh"
#include "osm/changeset.hh"
#include "osm/osmchange.hh"
#include "replicator/threads.hh"
#include "utils/log.hh"
#include "underpassconfig.hh"
#include "replicator/planetindex.hh"

using namespace underpassconfig;

#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1

// Exit code when connection to DB fails
#define EXIT_DB_FAILURE -1

using namespace logger;

// Forward declarations
namespace changesets {
class ChangeSet;
};

/// \namespace planetreplicator
namespace planetreplicator {

/// A helper function to simplify the main part.
template <class T> std::ostream &
operator<<(std::ostream &os, const std::vector<T> &v)
{
    copy(v.begin(), v.end(), std::ostream_iterator<T>(os, " "));
    return os;
}

/// \class PlanetReplicator
/// \brief This class does all the actual work
///
/// This class identifies, downloads, and processes a replication file.
/// Replication files are available from the OSM planet server.

/// Create a new instance, and read in the geoboundaries file.
PlanetReplicator::PlanetReplicator(void) {};

int
test_uri(std::string uri, ptime dt) {
    planetindex::PlanetIndexFile planetIndex;
    replication::Planet planet;
    std::string domain = "planet.maps.mail.ru";
    std::string url = "/replication/minute" + uri;
    log_debug("Downloading %1%%2%", domain, url);
    auto data = planet._downloadFile(domain, url).data;
    auto html = planet._processData(*data);
    std::istream& input(html);
    auto fileindex = planetIndex.getIndexDateFromHTML(input);
    int closestIndex = planetIndex.getClosestIndex(fileindex, dt);
    return closestIndex;
}

std::shared_ptr<RemoteURL> PlanetReplicator::findRemotePath(const underpassconfig::UnderpassConfig &config, ptime time) {
    planetindex::PlanetIndexFile planetIndex;
    int major = test_uri("/", time);
    int minor = test_uri("/" + planetIndex.zeroPad(major) + "/", time);
    int index = test_uri("/" + planetIndex.zeroPad(major) + "/" + planetIndex.zeroPad(minor) + "/", time);
    if (index > 0) {
        index -= 1 ;
    }
    auto remoteURL = std::make_shared<RemoteURL>();
    remoteURL->parse("https://planet.maps.mail.ru/replication/minute/001/001/001.osc.gz");
    remoteURL->updatePath(major, minor, index);
    return remoteURL;
};

} // namespace planetreplicator

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
